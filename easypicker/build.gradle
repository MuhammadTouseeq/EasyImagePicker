apply plugin: 'com.android.library'
import groovy.xml.MarkupBuilder

apply plugin: 'com.github.dcendents.android-maven'
group='com.github.anupamchugh'

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.0"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Task to generate our public.xml file
// See https://developer.android.com/studio/projects/android-library.html#PrivateResources
// We assume resources within res-public are public
    task generatepublicxml {

        def resDir = project.projectDir.absolutePath + "/src/main/res"

        // Include the desired res types
        // Note: we don't need the qualified resource directories,
        // since those resources will already be defined in the unqualified directories
        def tree = fileTree(dir: resDir,
                includes: ['**/anim/*.xml',
                           '**/color/*.xml',
                           '**/drawable/*.xml',
                           '**/layout/*.xml',
                           '**/values/*.xml'
                ],
                exclude: '**/public.xml'
        );

        // Create new public.xml with writer
        new File(resDir + "/values/public.xml").withWriter { writer ->
            // Create MarkupBuilder with 4 space indent
            def destXml = new MarkupBuilder(new IndentPrinter(writer, "    ", true));
            def destXmlMkp = destXml.getMkp();

            // GIST NOTE: our project needed the ResourceName suppression, but its not needed in general
            destXml.resources(
                    'xmlns:tools': 'http://schemas.android.com/tools',
                    'tools:ignore': 'ResourceName'
            ) {
                // Leave file comment
                destXmlMkp.yield "\r\n"
                destXmlMkp.comment("AUTO-GENERATED FILE.  DO NOT MODIFY. public.xml is generated by the generatepublicxml gradle task")

                tree.each { resFile ->

                    // use the directory name to get the type
                    def type = resFile.getParentFile().getName()

                    if (type == "values") {
                        // Resource files under values. Parse the file, and pull out the resource definitions
                        def parsePublicResources = new XmlParser().parse(resFile)
                        parsePublicResources.children().each {

                            // Type is usually the element, but sometimes a type attribute is present
                            // example: <item name="line_spacing_multiplier" format="float" type="dimen">1.4</item>
                            type = it.name()
                            if(it.@type){
                                type = it.@type
                            }

                            // it.@name is value in name=
                            "public"("name": it.@name, "type": type)
                        }
                    } else {
                        // Drawable, layout, etc files
                        "public"("name": resFile.getName().tokenize('.')[0], "type": type)
                    }
                }
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    // dexter runtime permissions
    implementation 'com.karumi:dexter:4.2.0'



}